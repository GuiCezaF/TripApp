// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id                  String            @id @default(uuid())
  name                String
  location            String
  locationDescription String            @default("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla venenatis leo sed tellus tempor hendrerit. Quisque pretium nisl ligula, ac venenatis tellus semper eu. Nam efficitur consequat metus eget luctus. Aliquam tristique magna diam, id lacinia augue consectetur a. Vivamus cursus massa non tortor consectetur consequat. Praesent pretium risus est, a tristique odio lacinia ac. Integer bibendum porttitor arcu eu pulvinar. ")
  startDate           DateTime
  endDate             DateTime
  pricePerDay         Decimal           @db.Decimal(8, 2)
  description         String
  coverImage          String
  imagesUrl           String[]
  highlights          String[]
  maxGuests           Int
  reservations        TripReservation[]
  countryCode         String
  recommended         Boolean           @default(false)
}

model TripReservation {
  id        String   @id @default(uuid())
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  startDate DateTime
  endDate   DateTime
  totalPaid Decimal
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservation   TripReservation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
